esphome:
  name: json-automation-demo
  friendly_name: JSON Automation Demo

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: "YourWiFi"
  password: "YourPassword"

logger:
  level: DEBUG

api:
  password: ""

ota:
  - platform: esphome
    password: ""

preferences:
  flash_write_interval: 5min

external_components:
  - source:
      type: local
      path: components

binary_sensor:
  - platform: gpio
    pin: 14
    name: "Motion Sensor"
    id: motion_sensor

  - platform: gpio
    pin: 15
    name: "Button"
    id: my_button

sensor:
  - platform: dht
    pin: 4
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity

light:
  - platform: binary
    name: "Living Room Light"
    id: living_room_light
    output: light_output_1

  - platform: binary
    name: "Bedroom Light"
    id: bedroom_light
    output: light_output_2

output:
  - platform: gpio
    pin: 12
    id: light_output_1

  - platform: gpio
    pin: 13
    id: light_output_2

switch:
  - platform: gpio
    pin: 16
    name: "Fan"
    id: fan

json_automation:
  id: my_automations
  json_data: |
    {
      "automations": [
        {
          "id": "motion_light",
          "trigger": {
            "type": "binary_sensor",
            "condition": "on_press",
            "parameters": {
              "object_id": "motion_sensor"
            }
          },
          "actions": [
            "light.turn_on: living_room_light"
          ]
        },
        {
          "id": "motion_light_off",
          "trigger": {
            "type": "binary_sensor",
            "condition": "on_release",
            "parameters": {
              "object_id": "motion_sensor"
            }
          },
          "actions": [
            "light.turn_off: living_room_light"
          ]
        }
      ]
    }
  on_automation_loaded:
    then:
      - logger.log: 
          format: "✅ Automations loaded and active: %d triggers created"
          args: ['id(my_automations).get_automations().size()']
  on_json_error:
    then:
      - logger.log:
          format: "❌ JSON Error: %s"
          args: ['error.c_str()']
          level: ERROR

button:
  - platform: template
    name: "Load Custom Automation"
    on_press:
      - json_automation.load_json:
          id: my_automations
          json_data: |
            {
              "automations": [
                {
                  "id": "button_toggle",
                  "trigger": {
                    "type": "binary_sensor",
                    "condition": "on_press",
                    "parameters": {
                      "object_id": "my_button"
                    }
                  },
                  "actions": [
                    "light.toggle: bedroom_light"
                  ]
                }
              ]
            }
      - json_automation.save_json:
          id: my_automations
